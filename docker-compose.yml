version: '3.8'

# =======================================================
# Docker Compose - Release 0.1.0: URL Shortener Platform
# =======================================================

services:
  # ===========================================
  # DATABASE & CACHE
  # ===========================================
  postgres:
    image: postgres:15-alpine
    container_name: urlshortener-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-urlshortener}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - '${HOST_POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-urlshortener}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - urlshortener-network

  redis:
    image: redis:7-alpine
    container_name: urlshortener-redis
    ports:
      - '${HOST_REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - urlshortener-network

  # ===========================================
  # CORE MICROSERVICE (Release 0.1.0)
  # ===========================================
  url-shortener-service:
    build:
      context: .
      dockerfile: apps/url-shortener-service/Dockerfile
    container_name: urlshortener-service
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-urlshortener}
      - REDIS_URL=redis://redis:6379
      - PORT=${PORT}
      - BASE_URL=${BASE_URL}
      - REDIRECT_BASE_URL=${REDIRECT_BASE_URL}
      # JWT Configuration (needed for v0.3.0 authentication)
      - JWT_SECRET=${JWT_SECRET:-super-secret-jwt-key}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      # Observability
      - ENABLE_SENTRY=${ENABLE_SENTRY}
      - ENABLE_METRICS=${ENABLE_METRICS}
      - LOG_LEVEL=${LOG_LEVEL}
      - ENABLE_OBSERVABILITY=${ENABLE_OBSERVABILITY:-true}
      - PROMETHEUS_ENABLED=${PROMETHEUS_ENABLED:-true}
    ports:
      - '${HOST_SERVICE_PORT:-3002}:${PORT}'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${PORT}/health']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - urlshortener-network

  # ===========================================
  # IDENTITY SERVICE (Release 0.2.0)
  # ===========================================
  identity-service:
    build:
      context: .
      dockerfile: apps/identity-service/Dockerfile
    container_name: urlshortener-identity-service
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-urlshortener}
      - JWT_SECRET=${JWT_SECRET:-super-secret-jwt-key}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      # Observability
      - ENABLE_SENTRY=${ENABLE_SENTRY}
      - ENABLE_METRICS=${ENABLE_METRICS}
      - LOG_LEVEL=${LOG_LEVEL}
      - ENABLE_OBSERVABILITY=${ENABLE_OBSERVABILITY:-true}
      - PROMETHEUS_ENABLED=${PROMETHEUS_ENABLED:-true}
    ports:
      - '${HOST_IDENTITY_PORT:-3001}:3001'
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/health']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - urlshortener-network

  # ===========================================
  # DOCUMENTATION SERVER
  # ===========================================
  docs-server:
    image: nginx:1.25-alpine
    container_name: urlshortener-docs
    volumes:
      - ./gateway/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./gateway/nginx/index.html:/usr/share/nginx/html/index.html:ro
      - ./gateway/docs-hub.html:/usr/share/nginx/html/index.html:ro
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - urlshortener-network

  # ===========================================
  # API GATEWAY
  # ===========================================
  krakend:
    image: devopsfaith/krakend:2.5
    container_name: urlshortener-gateway
    ports:
      - '${HOST_GATEWAY_PORT:-8080}:8080'
    volumes:
      - ./gateway/krakend.json:/etc/krakend/krakend.json:ro
    environment:
      - FC_ENABLE=1
      - FC_SETTINGS=/etc/krakend
      - FC_PARTIALS=/etc/krakend/partials
      - JWT_SECRET=${JWT_SECRET:-super-secret-jwt-key}
    depends_on:
      - identity-service
      - url-shortener-service
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - urlshortener-network

  # ===========================================
  # OBSERVABILIDADE REAL - Prometheus
  # ===========================================
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: urlshortener-prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - identity-service
      - url-shortener-service
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9090/health']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - urlshortener-network

  # ===========================================
  # OBSERVABILIDADE REAL - Grafana
  # ===========================================
  grafana:
    image: grafana/grafana:10.2.0
    container_name: urlshortener-grafana
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - urlshortener-network

# ===========================================
# VOLUMES & NETWORKS
# ===========================================
volumes:
  postgres_data:
    name: ${POSTGRES_VOLUME_NAME}
  redis_data:
    name: ${REDIS_VOLUME_NAME}
  prometheus_data:
  grafana_data:

networks:
  urlshortener-network:
    name: ${NETWORK_NAME}
    driver: bridge
